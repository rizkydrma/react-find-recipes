{"version":3,"sources":["components/Recipe/DetailRecipe/DetailRecipe.jsx","components/FormSearch/FormSearch.jsx","components/Recipe/Recipes.js","pages/Home/Home.jsx","actions/recipesAction.js","api/config.js","App.js","serviceWorker.js","reducers/recipesReducer.js","reducers/rootReducer.js","Store.js","index.js"],"names":["Recipe","props","recipe","location","state","Container","className","Row","Col","lg","src","image","alt","label","Math","round","calories","healthLabels","map","healthLabel","i","key","ingredients","ingredient","text","weight","FormSearch","fetchData","updateSearch","search","Form","onSubmit","inline","Input","type","onChange","value","name","Button","color","Recipes","sm","md","Card","CardImg","CardBody","CardTitle","CardText","CardFooter","to","pathname","Home","useState","setSearch","useSelector","recipes","dispatch","useDispatch","e","preventDefault","query","target","elements","searchInput","a","axios","get","response","data","payload","hits","getData","App","path","component","exact","DetailRecipe","Boolean","window","hostname","match","initialState","loading","recipesReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a18d304.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Row, Col, Container } from \"reactstrap\";\r\nimport \"./DetailRecipe.css\";\r\n\r\nconst Recipe = (props) => {\r\n  const recipe = props.location.state.recipe;\r\n  return (\r\n    <Container>\r\n      <div className=\"detail-recipe detail-recipe--white\">\r\n        <Row>\r\n          <Col lg=\"5\">\r\n            <img\r\n              src={recipe.image}\r\n              alt={recipe.label}\r\n              className=\"detail-recipe__image\"\r\n            />\r\n          </Col>\r\n          <Col lg=\"7\">\r\n            <div className=\"detail-recipe__body\">\r\n              <div className=\"detail-recipe__title\">{recipe.label}</div>\r\n              <div className=\"detail-recipe__description\">\r\n                Calorie : {Math.round(recipe.calories)}\r\n              </div>\r\n              <div className=\"detail-recipe__description\">\r\n                Health Labels :\r\n                {recipe.healthLabels.map((healthLabel, i) => (\r\n                  <span key={i}>{healthLabel},</span>\r\n                ))}\r\n              </div>\r\n              <div className=\"detail-recipe__description\">\r\n                Ingredient\r\n                <ul className=\"detail-recipe__ingredient\">\r\n                  {recipe.ingredients.map((ingredient, i) => {\r\n                    return (\r\n                      <li key={i}>\r\n                        {ingredient.text}, weight :{\" \"}\r\n                        {Math.round(ingredient.weight)} grm\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React from \"react\";\r\nimport { Form, Input, Button } from \"reactstrap\";\r\nconst FormSearch = ({ fetchData, updateSearch, search }) => {\r\n  return (\r\n    <Form className=\"search-form\" onSubmit={fetchData} inline>\r\n      <Input\r\n        className=\"search-form__input\"\r\n        type=\"text\"\r\n        onChange={updateSearch}\r\n        value={search}\r\n        name=\"searchInput\"\r\n      />\r\n      <Button color=\"primary\" className=\"search-form__button\" type=\"submit\">\r\n        Search\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormSearch;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Card,\r\n  CardTitle,\r\n  CardImg,\r\n  CardBody,\r\n  CardText,\r\n  CardFooter,\r\n  Button,\r\n  Col,\r\n} from \"reactstrap\";\r\n\r\nimport \"./Recipe.css\";\r\n\r\nconst Recipes = ({ recipe }) => {\r\n  return (\r\n    <Col sm=\"12\" md=\"4\" lg=\"3\">\r\n      <Card>\r\n        <CardImg src={recipe.image} alt={recipe.label} />\r\n        <CardBody>\r\n          <CardTitle>{recipe.label}</CardTitle>\r\n          <CardText>\r\n            Calories: <br /> {Math.round(recipe.calories)}\r\n          </CardText>\r\n        </CardBody>\r\n        <CardFooter>\r\n          <Button color=\"primary\">\r\n            <Link\r\n              to={{\r\n                pathname: \"/detail-recipe\",\r\n                state: {\r\n                  recipe: recipe,\r\n                },\r\n              }}\r\n              className=\"text-white\"\r\n            >\r\n              Detail Recipe\r\n            </Link>\r\n          </Button>\r\n        </CardFooter>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default Recipes;\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { Container, Row } from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData } from \"../../actions/recipesAction\";\r\n\r\nimport FormSearch from \"../../components/FormSearch/FormSearch\";\r\nimport Recipes from \"../../components/Recipe/Recipes\";\r\n\r\nconst Home = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const state = useSelector((state) => state.recipes);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchData = (e) => {\r\n    e.preventDefault();\r\n    const query = e.target.elements.searchInput.value;\r\n    dispatch(getData(query));\r\n  };\r\n\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <FormSearch\r\n        fetchData={fetchData}\r\n        updateSearch={updateSearch}\r\n        search={search}\r\n      />\r\n      <Container>\r\n        <Row>\r\n          {state.recipes.map((recipe) => (\r\n            <Recipes key={recipe.recipe.label} recipe={recipe.recipe} />\r\n          ))}\r\n        </Row>\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import axios from \"axios\";\r\nimport { APP_ID, APP_KEY } from \"../api/config\";\r\n\r\nexport const getData = (query) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: \"AWAITING_RECIPES\",\r\n    });\r\n    const response = await axios.get(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    );\r\n    const data = response.data;\r\n    dispatch({\r\n      type: \"SUCCESS_RECIPES\",\r\n      payload: data.hits,\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"REJECTED_RECIPES\",\r\n    });\r\n  }\r\n};\r\n","export const APP_ID = \"c5be5024\";\r\nexport const APP_KEY = \"870a0d518ccb9de56173b9fc3ff4534a\";\r\n","import React from \"react\";\r\nimport DetailRecipe from \"./components/Recipe/DetailRecipe/DetailRecipe\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Home from \"./pages/Home/Home\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <div className=\"header\">\r\n          <Link to=\"/\">\r\n            <h1 className=\"header__title header__title--white\">FindRecipes</h1>\r\n          </Link>\r\n        </div>\r\n\r\n        <Route path=\"/\" component={Home} exact />\r\n        <Route path=\"/detail-recipe\" component={DetailRecipe} />\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  loading: false,\r\n  recipes: [],\r\n};\r\n\r\nconst recipesReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"AWAITING_RECIPES\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case \"REJECTED_RECIPSE\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    case \"SUCCESS_RECIPES\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        recipes: payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default recipesReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport recipesReducer from \"./recipesReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  recipes: recipesReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}